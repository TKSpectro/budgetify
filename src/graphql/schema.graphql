### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
HelperType: Contains a JWT string (JSON-Web-Token) 
    for the authentication of the user.
"""
type AuthToken {
  token: String!
}

type Category {
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Group {
  createdAt: DateTime!
  id: String!

  """A list of all invites to this group."""
  invites: [Invite]

  """A list of all user's which have access to this group."""
  members: [User]
  name: String!

  """The users which have management right's over the group."""
  owners: [User]

  """A list of all transactions which happened in this group."""
  transactions: [GroupTransaction]
  updatedAt: DateTime!
  value: Money!
}

type GroupTransaction {
  createdAt: DateTime!

  """The group in which this transaction was booked."""
  group: Group
  groupId: String!
  id: String!
  name: String!

  """All users which ate some of the bought food from this transaction."""
  participants: [User]
  type: TransactionType!
  updatedAt: DateTime!

  """The user which booked the transaction."""
  user: User
  userId: String!
  value: Money!
}

type Household {
  createdAt: DateTime!
  id: String!

  """A list of all invite's for this household."""
  invites: [Invite]

  """A list of all user's which have access to this household."""
  members: [User]
  name: String!

  """The user which has management right's over the household."""
  owner: User
  ownerId: String!

  """A list of all payment's which where booked into this household."""
  payments(endDate: String, limit: Int, skip: Int, startDate: String): [Payment]

  """
  A list of all recurring payment's which will be booked into this household.
  """
  recurringPayments(id: String, limit: Int, skip: Int): [RecurringPayment]
  updatedAt: DateTime!
}

"""HelperType: The interval of how often the payment should be booked."""
enum Interval {
  DAILY
  MONTHLY
  QUARTERLY
  WEEKLY
  YEARLY
}

type Invite {
  createdAt: DateTime!

  """The group in which the person was invited."""
  group: Group
  groupId: String

  """The household in which the person was invited."""
  household: Household
  householdId: String
  id: String!

  """The email of the person which was invited."""
  invitedEmail: String!

  """The user which sent the invite. (Referrer)"""
  sender: User
  senderId: String!

  """The token which can be used from invited person to use the invite."""
  token: String!
  updatedAt: DateTime!
  validUntil: DateTime!
  wasUsed: Boolean!
}

"""Money custom scalar type. Converts int to float with 2 decimals."""
scalar Money

type Mutation {
  """
  Add a new owner to a group. Need to be logged in and be owner of the group.
  """
  addGroupOwner(id: String!, ownerId: String): Group!

  """
  This mutation should be called regularly (at least once a day)
          by a CRON-Job or something of this kind. To book all recurringPayment
          which need to be booked.
  """
  bookRecurringPayments(secretKey: String!): [RecurringPayment]

  """Create a new category. Can just be called by an admin."""
  createCategory(name: String!): Category!

  """Creates a new group with the given arguments and returns it."""
  createGroup(name: String!, value: Money): Group

  """Create a new invite. Need to be logged in."""
  createGroupInvite(groupId: String!, invitedEmail: String!): Invite!

  """
  Creates a new transaction in the specified group with the given arguments and returns it.
  """
  createGroupTransaction(groupId: String!, name: String!, participantIds: [String!]!, type: TransactionType!, value: Money!): GroupTransaction

  """Create a new invite. Need to be logged in."""
  createInvite(householdId: String!, invitedEmail: String!): Invite!

  """Create a new payment. Need to be logged in."""
  createPayment(categoryId: String!, description: String, householdId: String!, name: String!, value: Money!): Payment!

  """Create a new recurring payment. Need to be logged in."""
  createRecurringPayment(categoryId: String!, description: String, endDate: DateTime, householdId: String!, interval: Interval!, name: String!, startDate: DateTime!, value: Money!): RecurringPayment!

  """Remove a invite. Need to be logged in."""
  deleteInvite(id: String!): Boolean

  """Deletes a user by anonymizing his personal data. Need to be logged in."""
  deleteUser: User!

  """
  This mutation takes the email and password of an existing user.
        Returns a JWT (JSON-Web-Token) for further authentication with the graphql-api.
  """
  login(email: String!, password: String!): AuthToken!

  """This mutation removes the authToken on the user side."""
  logout: String

  """Remove a new category. Can just be called by an admin."""
  removeCategory(name: String!): Category!

  """
  Remove a member from the specified group. Need to be logged in and own the group.
  """
  removeGroupMember(id: String!, memberId: String!): Group!

  """
  Remove a owner of a group. Need to be logged in and be owner of the group.
  """
  removeGroupOwner(id: String!, ownerId: String): Group!

  """
  Remove a member from the specified household. Need to be logged in and own the household.
  """
  removeHouseholdMember(id: String!, memberId: String!): Household!

  """
  This mutation takes the values for a new user as arguments. 
        Saves them and returns a JWT (JSON-Web-Token) 
        for further authentication with the graphql-api.
  """
  signup(email: String!, firstname: String!, lastname: String!, password: String!): AuthToken!

  """
  Update a already existing group. Need to be logged in and be owner of the group.
  """
  updateGroup(id: String!, ownerId: String): Group!

  """
  Update a already existing household. Need to be logged in and owner of the household.
  """
  updateHousehold(id: String!, ownerId: String): Household!

  """Update a new recurring payment. Need to be logged in."""
  updateRecurringPayment(categoryId: String, description: String, endDate: DateTime, householdId: String!, id: String!, interval: Interval, name: String, startDate: DateTime, value: Money): RecurringPayment!

  """
  Use a invite. Logged in user gets added to the group specified in the invite. Need to be logged in.
  """
  useGroupInvite(token: String!): Invite

  """
  Use a invite. Logged in user gets added to the household in invite. Need to be logged in.
  """
  useInvite(token: String!): Invite
}

"""
HelperType: Contains a participant and the value he can take out of the group or has to pay.
"""
type Participant {
  name: String!
  userId: String!
  value: Money!
}

"""A payment is a NOT changeable booking of a specific value."""
type Payment {
  """The category in which the user placed it. (e.g. food, income)"""
  category: Category
  categoryId: String!
  createdAt: DateTime!
  description: String

  """The household in which the payment was booked."""
  household: Household
  householdId: String!
  id: String!
  name: String!
  updatedAt: DateTime!

  """The user from which the payment was booked."""
  user: User
  userId: String
  value: Money!
}

type Query {
  """
  Returns all households available in the database. 
        Can only be queried by admin accounts.
  """
  allHouseholds: [Household]

  """Returns the virtual balances for all members in the given group."""
  calculateMemberBalances(id: String!): [Participant]

  """All available categories. Filterable by id or name via arguments"""
  categories(id: String, name: String): [Category]

  """Returns a group by searching for the given id."""
  group(id: String!): Group
  household(id: String): Household
  households: [Household]

  """
  Returns the data of the currently logged in user. Returns null if no user is logged in
  """
  me: User
  recurringPayments: [RecurringPayment]
}

type RecurringPayment {
  """The category in which the payment will be booked."""
  category: Category
  categoryId: String!
  createdAt: DateTime!
  description: String
  endDate: DateTime

  """The household in which the payment will be booked."""
  household: Household
  householdId: String!
  id: String!
  interval: Interval!

  """The date of when this recurring payment was last booked."""
  lastBooking: DateTime
  name: String!

  """The date of when this recurring payment should be booked next."""
  nextBooking: DateTime

  """All payment's which where booked by this recurring payment."""
  payments: [Payment]
  startDate: DateTime!
  updatedAt: DateTime!

  """The user from whom the payment will be booked."""
  user: User
  userId: String
  value: Money!
}

enum TransactionType {
  BUY
  TAKE_OUT
  TOP_UP
}

"""A user is an account which can join households and create payments"""
type User {
  createdAt: DateTime!
  email: String!
  firstname: String!

  """The payments which were booked in groups and where payed by the user."""
  groupTransactions: [GroupTransaction]

  """
  All group payments which the user participated in. e.g. user ate some of the bought stuff.
  """
  groupTransactionsParticipant: [GroupTransaction]

  """The group's in which the user is joined."""
  groups: [Group]

  """The user's safely encrypted password"""
  hashedPassword: String!

  """The household's in which the user is a member."""
  households: [Household]
  id: String!

  """The invite's which where send by the user."""
  invites: [Invite]

  """
  The user's role. This could be extended to a complete role system in the future
  """
  isAdmin: Boolean!
  lastname: String!
  name: String!

  """The groups's in which the user is the current owner"""
  ownedGroups: [Group]

  """The household's in which the user is the current owner"""
  ownedHouseholds: [Household]

  """All payment's which where done by the user."""
  payments: [Payment]
  updatedAt: DateTime!
}
