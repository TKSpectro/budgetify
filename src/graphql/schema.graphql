### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthToken {
  token: String!
}

type Category {
  createdAt: DateTime!
  id: String!
  name: String!
  payments: [Payment]
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Household {
  createdAt: DateTime!
  id: String!
  invites: [Invite]
  members: [User]
  name: String!
  owner: User
  ownerId: String!
  payments: [Payment]
  recurringPayments: [RecurringPayment]
  updatedAt: DateTime!
}

"""The interval of how often the payment should be booked"""
enum Interval {
  DAILY
  MONTHLY
  QUARTERLY
  WEEKLY
  YEARLY
}

type Invite {
  createdAt: DateTime!
  household: Household
  householdId: String!
  id: String!
  invitedEmail: String!
  link: String!
  sender: User
  senderId: String!
  updatedAt: DateTime!
  validUntil: DateTime!
  wasUsed: Boolean!
}

type Mutation {
  """
  This mutation should be called regularly (at least once a day)
          by a CRON-Job or something of this kind. To book all recurringPayment
          which need to be booked
  """
  bookRecurringPayments(secretKey: String!): [RecurringPayment]
  createCategory(name: String!): Category!
  login(email: String!, password: String!): AuthToken!
  removeCategory(name: String!): Category!
  signup(email: String!, firstname: String!, lastname: String!, password: String!): AuthToken!
}

type Payment {
  category: Category
  categoryId: String!
  createdAt: DateTime!
  description: String
  household: Household
  householdId: String!
  id: String!
  name: String!
  updatedAt: DateTime!
  user: User
  userId: String
  value: Float!
}

type Query {
  categories: [Category]!
  category(id: String, name: String): Category
  household(id: String): Household
  households: [Household]
  me: User
  recurringPayments: [RecurringPayment]
}

type RecurringPayment {
  category: Category
  categoryId: String!
  createdAt: DateTime!
  description: String
  endDate: DateTime
  household: Household
  householdId: String!
  id: String!
  interval: Interval!
  lastBooking: DateTime
  name: String!
  nextBooking: DateTime
  payments: [Payment]
  startDate: DateTime!
  updatedAt: DateTime!
  user: User
  userId: String
  value: Float!
}

type User {
  createdAt: DateTime!
  email: String!
  firstname: String!
  hashedPassword: String!
  households: [Household]
  id: String!
  invites: [Invite]
  lastname: String!
  name: String!
  ownedHouseholds: [Household]
  payments: [Payment]
  updatedAt: DateTime!
}
