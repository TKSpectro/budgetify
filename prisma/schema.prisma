// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// all models have the same basic template structure
// model  {
//   id
//   own attributes
//   createdAt
//   updatedAt
//   relations
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                           String             @id @default(uuid())
  firstname                    String
  lastname                     String
  email                        String             @unique
  hashedPassword               String
  isAdmin                      Boolean            @default(false)
  createdAt                    DateTime           @default(now())
  updatedAt                    DateTime           @updatedAt
  households                   Household[]
  invites                      Invite[]
  ownedHouseholds              Household[]        @relation("Owner")
  payments                     Payment[]
  RecurringPayment             RecurringPayment[]
  groups                       Group[]
  groupTransactions            GroupTransaction[]
  groupTransactionsParticipant GroupTransaction[] @relation("Participants")
  ownedGroups                  Group[]            @relation("GroupOwners")
}

model Category {
  id               String             @id @default(uuid())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  payments         Payment[]
  RecurringPayment RecurringPayment[]
}

model Payment {
  id                 String            @id @default(uuid())
  name               String
  value              Int
  description        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  category           Category          @relation(fields: [categoryId], references: [id])
  categoryId         String
  user               User              @relation(fields: [userId], references: [id])
  userId             String
  household          Household         @relation(fields: [householdId], references: [id])
  householdId        String
  recurringPayment   RecurringPayment? @relation(fields: [recurringPaymentId], references: [id])
  recurringPaymentId String?
}

enum Interval {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model RecurringPayment {
  id          String    @id @default(uuid())
  name        String
  value       Int
  description String?
  interval    Interval  @default(MONTHLY)
  startDate   DateTime  @default(now())
  endDate     DateTime?
  lastBooking DateTime?
  nextBooking DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  household   Household @relation(fields: [householdId], references: [id])
  householdId String
  Payment     Payment[]
}

model Household {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  owner            User               @relation("Owner", fields: [ownerId], references: [id])
  ownerId          String
  members          User[]
  invites          Invite[]
  payments         Payment[]
  RecurringPayment RecurringPayment[]
}

model Invite {
  id           String     @id @default(uuid())
  validUntil   DateTime
  wasUsed      Boolean
  invitedEmail String
  token        String     @unique @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  household    Household? @relation(fields: [householdId], references: [id])
  householdId  String?
  group        Group?     @relation(fields: [groupId], references: [id])
  groupId      String?

}

model Group {
  id           String             @id @default(uuid())
  name         String
  value        Int                @default(0)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  owners       User[]             @relation("GroupOwners")
  members      User[]
  transactions GroupTransaction[]
  invites      Invite[]
  thresholds   Threshold[]
}

enum TransactionType {
  TOP_UP
  TAKE_OUT
  BUY
}

model GroupTransaction {
  id           String          @id @default(uuid())
  name         String
  value        Int             @default(0)
  type         TransactionType
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  group        Group           @relation(fields: [groupId], references: [id])
  groupId      String
  user         User            @relation(fields: [userId], references: [id])
  userId       String
  participants User[]          @relation(name: "Participants")
}

enum ThresholdTrigger {
  OVER
  UNDER
}

enum ThresholdType {
  GOAL
  LIMIT
  WARNING
}

model Threshold {
  id        String           @id @default(uuid())
  name      String
  value     Int
  trigger   ThresholdTrigger
  type      ThresholdType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  group     Group            @relation(fields: [groupId], references: [id])
  groupId   String
}
