// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// all models have the same basic template structure
// model  {
//   id
//   own attributes
//   createdAt
//   updatedAt
//   relations
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                       String             @id @default(uuid())
  firstname                String
  lastname                 String
  email                    String             @unique
  hashedPassword           String
  isAdmin                  Boolean            @default(false)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  households               Household[]
  invites                  Invite[]
  ownedHouseholds          Household[]        @relation("Owner")
  payments                 Payment[]
  RecurringPayment         RecurringPayment[]
  groups                   Group[]
  groupPayments            GroupPayment[]
  groupPaymentsParticipant GroupPayment[]     @relation("Participants")
}

model Category {
  id               String             @id @default(uuid())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  payments         Payment[]
  RecurringPayment RecurringPayment[]
}

model Payment {
  id                 String            @id @default(uuid())
  name               String
  value              Float
  description        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  category           Category          @relation(fields: [categoryId], references: [id])
  categoryId         String
  user               User?             @relation(fields: [userId], references: [id])
  userId             String?
  household          Household         @relation(fields: [householdId], references: [id])
  householdId        String
  recurringPayment   RecurringPayment? @relation(fields: [recurringPaymentId], references: [id])
  recurringPaymentId String?
}

enum Interval {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model RecurringPayment {
  id          String    @id @default(uuid())
  name        String
  value       Float
  description String?
  interval    Interval  @default(MONTHLY)
  startDate   DateTime  @default(now())
  endDate     DateTime?
  lastBooking DateTime?
  nextBooking DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
  household   Household @relation(fields: [householdId], references: [id])
  householdId String
  Payment     Payment[]
}

model Household {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  owner            User               @relation("Owner", fields: [ownerId], references: [id])
  ownerId          String
  members          User[]
  invites          Invite[]
  payments         Payment[]
  RecurringPayment RecurringPayment[]
}

model Invite {
  id           String    @id @default(uuid())
  validUntil   DateTime
  wasUsed      Boolean
  invitedEmail String
  token        String    @unique @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  sender       User      @relation(fields: [senderId], references: [id])
  senderId     String
  household    Household @relation(fields: [householdId], references: [id])
  householdId  String
}

model Group {
  id        String         @id @default(uuid())
  name      String
  value     Float          @default(0.00)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  members   User[]
  payments  GroupPayment[]
}

model GroupPayment {
  id           String   @id @default(uuid())
  name         String
  value        Float    @default(0.00)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  group        Group    @relation(fields: [groupId], references: [id])
  groupId      String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  participants User[]   @relation(name: "Participants")
}
